using System;
using System.Collections.Generic;


namespace _08._Car_Salesman
{
    public class StartUp
    {
        static void Main(string[] args)
        {

            var numberOfEngines = int.Parse(Console.ReadLine());
            var engines = new List<Engine>();

            for (int i = 0; i < numberOfEngines; i++)
            {
                var info = Console.ReadLine().Split();
                engines.Add(CreateEngine(info));
            }
            var numberOfCars = int.Parse(Console.ReadLine());
            var cars = new List<Car>();

            for (int i = 0; i < numberOfCars; i++)
            {
                var info = Console.ReadLine().Split();
                cars.Add(CreateCar(info, engines));
            }

            foreach (Car car in cars)
            {
                Console.WriteLine(car.ToString());

            }


        }

        public static Car CreateCar(string[] info, List<Engine> engines)
        {
            var carModel = info[0];
            var enginModel = info[1];
            var engine = engines.Find(e => e.Model == enginModel);
            var car = new Car(carModel, engine);
            if (info.Length > 2)
            {

                var isDigit = int.TryParse(info[2], out int weight);
                if (isDigit)
                {
                    car.Weight = weight;
                }
                else
                {
                    car.Color = info[2];
                }
                if (info.Length > 3)
                {
                    car.Color = info[3];
                }

            }
            return car;
        }

        public static Engine CreateEngine(string[] info)
        {
            var engineModel = info[0];
            var enginePower = info[1];

            Engine engine = new Engine(engineModel, int.Parse(enginePower));

            if (info.Length > 2)
            {
                var isDigit = int.TryParse(info[2], out int displacement);
                if (isDigit)
                {
                    engine.Displacement = displacement;
                }
                else
                {
                    engine.Efficiency = info[2];
                }
                if (info.Length > 3)
                {
                    engine.Efficiency = info[3];
                }
            }



            return engine;
        }
    }
}

using System;
using System.Collections.Generic;
using System.Text;

namespace _08._Car_Salesman
{
    public class Car
    {
        public string Model { get; set; }

        public Engine Engine { get; set; }

        public int Weight { get; set; }

        public string Color { get; set; }


        public  Car(string model, Engine engine)
        {

            Model = model;
                Engine = engine;
        }

        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append($"{Model}:");
            sb.AppendLine();
            sb.AppendLine(Engine.ToString());
            sb.AppendLine();
            sb.AppendLine(Weight == 0 ? "  Weight: n/a" : $"Weight: {Weight}");
            sb.AppendLine();
            sb.AppendLine(String.IsNullOrEmpty(Color) ? "  Color: n/a" : $"  Color: {Color}");
           


            return sb.ToString().TrimEnd();
        }



    }


}

using System;
using System.Collections.Generic;
using System.Text;

namespace _08._Car_Salesman
{
    public class Engine
    {

        public string Model { get; set; }

        public int Power { get; set; }

        public int Displacement { get; set; }

        public string Efficiency { get; set; }
         
        public Engine(string model, int power)
        {
            Model = model;
            Power = power;
        }
     
        public override string ToString()
        {
            var sb = new StringBuilder();

            sb.Append($"  {Model}:");
            sb.AppendLine();
            sb.Append($"    Power: {Power}");
            sb.AppendLine();
            sb.Append(Displacement == 0 ? "    Displacement: n/a" : $"    Displacement:{Displacement}");
            sb.AppendLine();
            sb.Append(string.IsNullOrEmpty(Efficiency) ? "    Efficiency: n/a" : $"Efficiency: {Efficiency}");



            return sb.ToString().TrimEnd();
        }

    }
}





